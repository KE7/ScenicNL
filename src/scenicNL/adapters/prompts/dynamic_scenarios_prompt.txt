Scenic is a probabilistic programming language for modeling the environments of autonomous cars. A Scenic program defines a distribution over scenes, configurations of physical objects and agents; sampling from this distribution yields concrete scenes which can be simulated to produce training or testing data. Scenic can also define (probabilistic) policies for dynamic agents, allowing modeling scenarios where agents take actions over time in response to the state of the world. We use CARLA to render the scenes and simulate the agents.

# Specifiers
Scenic allows for specifiers such as `left of` and `facing` for specifying relative positions and orientations of objects. An example:
new Car left of curb by 0.5, 
    with model CarModel.models['BUS']
Here is one including a uniformly random choice of parked car angle:
new Car left of curb by 0.5,
    facing Range(-5, 5) deg relative to roadDirection
The order in which you write specifiers gives priorities.
new Object ahead of plane by 100, on ground, with parentOrientation (0, 90 deg, 0)
This example, shows `with` has the highest priortiy, 1, `on ground` has priority 2 (since being on the ground is more important than being ahead of the plane), and `ahead of plane` has priority 3.

# Behaviors
Objects which can take actions over time are called agents. We specifiy their dynamic behavior using the built-in property, `behavior`. A behavior defines a sequence of actions for the agent to take, which need not be fixed but can be probabilistic and depend on the state of the agent or other objects. In Scenic, an action is an instantaneous operation executed by an agent, like setting the steering angle of a car or turning on its headlights. 
To define a behavior, we write a function which runs over the course of the scenario, periodically issuing actions. Scenic uses a discrete notion of time, so at each time step the function specifies zero or more actions for the agent to take. The function can also access the current state of the agent and other objects in the scene, and use this information to determine which actions to take. 

Here is an example of a behavior where a car is waiting for an ego car to be a certain distance away before it starts moving:
behavior WaitUntilClose(threshold=15):
    while (distance from self to ego) > threshold:
        wait
    do FollowLaneBehavior()
Here, we repeatedly query the distance from the agent running the behavior (self) to the ego car; as long as it is above a threshold, we wait, which means take no actions. Once the threshold is met, we start driving by invoking the built in, FollowLaneBehavior. Since FollowLaneBehavior runs forever, we will never return to the WaitUntilClose behavior.

Unlike ordinary Scenic code, control flow constructs such as if and while are allowed to depend on random variables inside a behavior. Any distributions defined inside a behavior are sampled at simulation time, not during scene sampling. Consider the following behavior:
behavior Foo():
    threshold = Range(4, 7)
    while True:
        if self.distanceToClosest(Pedestrian) < threshold:
            strength = TruncatedNormal(0.8, 0.02, 0.5, 1)
            take SetBrakeAction(strength), SetThrottleAction(0)
        else:
            take SetThrottleAction(0.5), SetBrakeAction(0)
Here, the value of threshold is sampled only once, at the beginning of the scenario when the behavior starts running. The value strength, on the other hand, is sampled every time step when the car is braking we use a slightly different braking strength (0.8 on average, but with 0 mean Gaussian noise added with standard deviation 0.02, truncated to the range [0.5, 1]). The behavior also uses the built-in function distanceToClosest, which returns the distance to the closest object of a given type (here, Pedestrian). This function is evaluated at each time step, so the car will always brake if a pedestrian is within the threshold distance.

Suppose we want a car that follows a lane, stopping whenever it encounters an obstacle. Scenic provides a concept of interrupts.
behavior FollowAvoidingObstacles():
    try:
        do FollowLaneBehavior()
    interrupt when self.distanceToClosest(Object) < 5:
        take SetBrakeAction(1)
This try-interrupt statement has similar syntax to the Python try statement (and in fact allows except clauses just as in Python), and begins in the same way: at first, the code block after the try: (the body) is executed. At the start of every time step during its execution, the condition from each interrupt clause is checked; if any are true, execution of the body is suspended and we instead begin to execute the corresponding interrupt handler. In the example above, there is only one interrupt, which fires when we come within 5 meters of any object. When that happens, FollowLaneBehavior is paused and we instead apply full braking for one time step. In the next step, we will resume FollowLaneBehavior wherever it left off, unless we are still within 5 meters of an object, in which case the interrupt will fire again.
If there are multiple interrupt clauses, successive clauses take precedence over those which precede them. Furthermore, such higher-priority interrupts can fire even during the execution of an earlier interrupt handler. This makes it easy to model a hierarchy of behaviors with different priorities; for example, we could implement a car which drives along a lane, passing slow cars and avoiding collisions, along the following lines:
behavior Drive():
    try:
        do FollowLaneBehavior()
    interrupt when self.distanceToNextObstacle() < 20:
        do PassingBehavior()
    interrupt when self.timeToCollision() < 5:
        do CollisionAvoidance()
Here, the car begins by lane following, switching to passing if there is a car or other obstacle too close ahead. During either of those two sub-behaviors, if the time to collision gets too low, we switch to collision avoidance. Once the CollisionAvoidance behavior completes, we will resume whichever behavior was interrupted earlier. If we were in the middle of PassingBehavior, it will run to completion (possibly being interrupted again) before we finally resume FollowLaneBehavior. As this example illustrates, when an interrupt handler completes, by default we resume execution of the interrupted code. If this is undesired, the abort statement can be used to cause the entire try-interrupt statement to exit. For example, to run a behavior until a condition is met without resuming it afterward, we can write:
behavior ApproachAndTurnLeft():
    try:
        do FollowLaneBehavior()
    interrupt when (distance from self to intersection) < 10:
        abort    # cancel lane following
    do WaitForTrafficLightBehavior()
    do TurnLeftBehavior()
Alternatively, we can use `until` to specify a condition that must be met before the behavior can complete.
behavior ApproachAndTurnLeft():
    do FollowLaneBehavior() until (distance from self to intersection) < 10
    do WaitForTrafficLightBehavior()
    do TurnLeftBehavior()
Or we can do it by time:
behavior DriveForAWhile():
    do FollowLaneBehavior() for 30 seconds
The alternative form `do behavior for n steps` uses time steps instead of real simulation time.

Finally, note that when try-interrupt statements are nested, interrupts of the outer statement take precedence. This makes it easy to build up complex behaviors in a modular way. For example, if for a particular scenario we want a car that drives normally but suddenly brakes for 5 seconds when it reaches a certain area, we can write:
behavior DriveWithSuddenBrake():
    haveBraked = False
    try:
        do Drive()
    interrupt when self in targetRegion and not haveBraked:
        do StopBehavior() for 5 seconds
        haveBraked = True
As the last example shows, behaviors can use local variables to maintain state, which is useful when implementing behaviors which depend on actions taken in the past. To elaborate on that example, suppose we want a car which usually follows the Drive behavior, but every 15-30 seconds stops for 5 seconds. We can implement this behavior as follows:
behavior DriveWithRandomStops():
    delay = Range(15, 30) seconds
    last_stop = 0
    try:
        do Drive()
    interrupt when simulation().currentTime - last_stop > delay:
        do StopBehavior() for 5 seconds
        delay = Range(15, 30) seconds
        last_stop = simulation().currentTime

Scenic provides a rich set of built-in behaviors which can be used as is or as building blocks for more complex behaviors. Here is a list of some of the built-in behaviors:
behavior ConstantThrottleBehavior(x : float):
    # Constant throttle, no reverse, no handbrake

behavior DriveAvoidingCollisions(target_speed : float = 25, avoidance_threshold : float =10):
    # Drive at a target speed, avoiding collisions with other vehicles
    # Throttle is off and braking is applied if the distance to the nearest vehicle is less 
    # than the avoidance threshold

behavior AccelerateForwardBehavior():
    # Accelerate forward with throttle set to 0.5

behavior WalkForwardBehavior():
    # Walk forward behavior for pedestrians
    # Uniformly sample either side of the sidewalk for the pedestrian to walk on

behavior FollowLaneBehavior(target_speed : float = 10, laneToFollow : Lane = None, is_oppositeTraffic : bool = False):
    # Follow's the lane on which the vehicle is at, unless the laneToFollow is specified.
    # Once the vehicle reaches an intersection, by default, the vehicle will take the straight route.
    # If straight route is not available, then any availble turn route will be taken, uniformly randomly. 
    # If turning at the intersection, the vehicle will slow down to make the turn, safely. 
    # This behavior does not terminate. A recommended use of the behavior is to accompany it with condition,
    # e.g. do FollowLaneBehavior() until ...
    # :param target_speed: Its unit is in m/s. By default, it is set to 10 m/s
    # :param laneToFollow: If the lane to follow is different from the lane that the vehicle is on, this parameter can be used to specify that lane. By default, this variable will be set to None, which means that the vehicle will follow the lane that it is currently on.

behavior FollowTrajectoryBehavior(target_speed : float = 10, trajectory : List[Lane] = None, turn_speed : float = None):
    # Follows the given trajectory. The behavior terminates once the end of the trajectory is reached.
    # :param target_speed: Its unit is in m/s. By default, it is set to 10 m/s
    # :param trajectory: It is a list of sequential lanes to track, from the lane that the vehicle is initially on to the lane it should end up on.  

behavior TurnBehavior(trajectory : List[Lane] = None, target_speed : float = 6):
    # This behavior uses a controller specifically tuned for turning at an intersection.
    # This behavior is only operational within an intersection, 
    # it will terminate if the vehicle is outside of an intersection. 

behavior LaneChangeBehavior(laneSectionToSwitchTo : Lane, is_oppositeTraffic : bool = False, target_speed : float = 10):
    # is_oppositeTraffic should be specified as True only if the laneSectionToSwitch to has
    # the opposite traffic direction to the initial lane from which the vehicle started LaneChangeBehavior

behavior AutopilotBehavior():
    """Behavior causing a vehicle to use CARLA's built-in autopilot."""
    take SetAutopilotAction(True)

behavior WalkForwardBehavior(speed=0.5):
    take SetWalkingDirectionAction(self.heading), SetWalkingSpeedAction(speed)

behavior WalkBehavior(maxSpeed=1.4):
    take SetWalkAction(True, maxSpeed)

behavior CrossingBehavior(reference_actor, min_speed=1, threshold=10, final_speed=None):
    # This behavior dynamically controls the speed of an actor that will perpendicularly (or close to)
    # cross the road, so that it arrives at a spot in the road at the same time as a reference actor.
    # Args:
    #     min_speed (float): minimum speed of the crossing actor. As this is a type of "synchronization action",
    #         a minimum speed is needed, to allow the actor to keep moving even if the reference actor has stopped
    #     threshold (float): starting distance at which the crossing actor starts moving
    #     final_speed (float): speed of the crossing actor after the reference one surpasses it

If the behavior you want is not included in the built-in behaviors, you can define your own behavior using combinations of the built-in behaviors or by defining a custom behavior using the following as an example:
behavior TurnBehavior(trajectory : List[Lane] = None, target_speed : float = 6):
    # This behavior uses a controller specifically tuned for turning at an intersection.
    # This behavior is only operational within an intersection, 
    # it will terminate if the vehicle is outside of an intersection. 

    if isinstance(trajectory, PolylineRegion):
        trajectory_centerline = trajectory
    else:
        trajectory_centerline = concatenateCenterlines([traj.centerline for traj in trajectory])

    # instantiate longitudinal and lateral controllers
    _lon_controller, _lat_controller = simulation().getTurningControllers(self)

    past_steer_angle = 0

    while self in _model.network.intersectionRegion:
        if self.speed is not None:
            current_speed = self.speed
        else:
            current_speed = 0

        cte = trajectory_centerline.signedDistanceTo(self.position)
        speed_error = target_speed - current_speed

        # compute throttle : Longitudinal Control
        throttle = _lon_controller.run_step(speed_error)

        # compute steering : Latitudinal Control
        current_steer_angle = _lat_controller.run_step(cte)

        take RegulatedControlAction(throttle, current_steer_angle, past_steer_angle)
        past_steer_angle = current_steer_angle

Just as you can declare spatial constraints on scenes using the require statement, you can also impose constraints on dynamic scenarios. For example, if we don’t want to generate any simulations where car1 and car2 are simultaneously visible from the ego car, we could write:
require always not ((ego can see car1) and (ego can see car2))
Here, `always condition` is a linear temporal (LTL) operator which can only be used inside a requirement, and which evaluates to true if and only if the condition is true at every time step of the scenario. So if the condition above is ever false during a simulation, the requirement will be violated, causing Scenic to reject that simulation and sample a new one. Similarly, we can require that a condition hold at some time during the scenario using the eventually operator:
require eventually ego in intersection

So, if you need to include to include temporal aspects in your behavior, you use a require statement like so to model that no pedestrian comes close to self until the ego does (after which we place no further restrictions)
behavior WaitUntilClose(threshold=15):
    while distance from self to ego > threshold:
        require self.distanceToClosest(Pedestrian) > threshold
        wait
    do FollowLaneBehavior()

Temporal operators can be combined with Boolean operators (just as in LTL) to build up more complex requirements:
require (always car.speed < 30) implies (always distance to car > 10)
Or relational:
require car2 not in intersection until car1 in intersection
require eventually car2 in intersection

# Preconditions and Invariants
Even general behaviors designed to be used in multiple scenarios may not operate correctly from all possible starting states: for example, FollowLaneBehavior assumes that the agent is actually in a lane rather than, say, on a sidewalk. To model such assumptions, Scenic provides a notion of guards for behaviors. Most simply, we can specify one or more preconditions:
behavior MergeInto(newLane):
    precondition: self.lane is not newLane and self.road is newLane.road
    ...
Here, the precondition requires that whenever the MergeInto behavior is executed by an agent, the agent must not already be in the destination lane but should be on the same road. We can add any number of such preconditions; like ordinary requirements, violating any precondition causes the simulation to be rejected.

Since behaviors can be interrupted, it is possible for a behavior to resume execution in a state it doesn’t expect: imagine a car which is lane following, but then swerves onto the shoulder to avoid an accident; naïvely resuming lane following, we find we are no longer in a lane. To catch such situations, Scenic allows us to define invariants which are checked at every time step during the execution of a behavior, not just when it begins running. These are written similarly to preconditions:
behavior FollowLaneBehavior():
    invariant: self in road
    ...

# Require and Terminate:
Require and terminate statements can be used to enforce post-conditions that determine that certain events occured or terminate the program after certain conditions are met thus satisfying the requirements of the scenario. Any require or terminate statement should not be about time and should be about events in the scene. For example, to make sure an oncoming Car is at a visible section of the lane:
require blockingCar can see oncomingCar
require (distance from blockingCar to oncomingCar) < DIST_BTW_BLOCKING_ONCOMING_CARS
require (distance from blockingCar to intersection) > DIST_TO_INTERSECTION

Scenic scripts are typically divided into three sections: parameter definitions, scene setup, behaviors, and post-conditions.

Now please write your own scenic program to model the scenario given by the user. Order your program as follows:

1. Parameter Definitions:
In the parameter definitions section, you handle imports and define any parameters your scenario will use.
Like Python, a Scenic script begins with importing necessary libraries.
The first lines could be: "param map = localPath('../../../assets/maps/CARLA/Town05.xodr')
param carla_map = 'Town05'
model scenic.simulators.carla.model" to import the simulator library.
The set of maps allowed is only of the format ../../../assets/maps/CARLA/Town01.xodr for Town01, Town02, Town03, Town04, Town05, Town06, Town07.
No other map can be accessed. Please do not access exact streets or lanes as a result.
Then define any scene parameters, for example: "speed = Range(15, 25)" defines a parameter speed with values ranging from 15 to 25.

2. Scene Setup and Geometry:
In the scene setup section, you describe the static aspects of the scenario. 
If you need certain objects to be placed in the scene, you can define them here.
For example, "lane = Uniform(*network.lanes)
spawnPt = new OrientedPoint on lane.centerline
obstacle = new Trash at spawnPt offset by Range(1, -1) @ 0" creates a Trash obstacle offset from the centerline of a random lane.

If you need certain properties of objects in the scene, you must search for them yourself.
For example, to find lanes that have a lane to their left in the opposite direction
laneSecsWithLeftLane = []
for lane in network.lanes:
    for laneSec in lane.sections:
        if laneSec._laneToLeft is not None:
            if laneSec._laneToLeft.isForward is not laneSec.isForward:
                laneSecsWithLeftLane.append(laneSec)

assert len(laneSecsWithLeftLane) > 0, \
    'No lane sections with adjacent left lane with opposing \
    traffic direction in network.'

initLaneSec = Uniform(*laneSecsWithLeftLane)
leftLaneSec = initLaneSec._laneToLeft

spawnPt = new OrientedPoint on initLaneSec.centerline

3. Behaviors:
In the behavior section, you describe the dynamic aspects of the scenario.

4. Placement
After defining the behaviors, you can place the agents in the scene. 
If needed, you can use syntax such as "A can see B" to make sure agent B is visible to agent A.
You can also use syntax like "distance from A to B" to make sure the distance between A and B is within a certain range. 
oncomingCar = new Car on leftLaneSec.centerline,
    with behavior OncomingCarBehavior()

ego = new Car at spawnPt,
    with behavior EgoBehavior(leftLaneSec)
    
blockingCar = new Car following roadDirection from ego for BLOCKING_CAR_DIST,
                with viewAngle 90 deg

5. Post-Conditions:
After all behaviors and agents are defined, the last require and terminate statements can be used to enforce post-conditions that determine that certain events occured or terminate the program after certain conditions are met thus satisfying the requirements of the scenario. 

The output should be a Scenic script that sets up a scene that models the given natural language description.
For any values that are not specified in the description, you should define a probability distribution over the possible range of values.
For example, if a car is braking with unknown strength, you can use a truncated normal distribution like so:
strength = TruncatedNormal(0.8, 0.02, 0.5, 1) # 0.8 mean, 0.02 standard deviation, 0.5 lower bound, 1 upper bound
take SetBrakeAction(strength), SetThrottleAction(0)
